(in-package :cl-nlopt)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.7
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcenum nlopt_algorithm
	(:NLOPT_GN_DIRECT #.0)
	:NLOPT_GN_DIRECT_L
	:NLOPT_GN_DIRECT_L_RAND
	:NLOPT_GN_DIRECT_NOSCAL
	:NLOPT_GN_DIRECT_L_NOSCAL
	:NLOPT_GN_DIRECT_L_RAND_NOSCAL
	:NLOPT_GN_ORIG_DIRECT
	:NLOPT_GN_ORIG_DIRECT_L
	:NLOPT_GD_STOGO
	:NLOPT_GD_STOGO_RAND
	:NLOPT_LD_LBFGS_NOCEDAL
	:NLOPT_LD_LBFGS
	:NLOPT_LN_PRAXIS
	:NLOPT_LD_VAR1
	:NLOPT_LD_VAR2
	:NLOPT_LD_TNEWTON
	:NLOPT_LD_TNEWTON_RESTART
	:NLOPT_LD_TNEWTON_PRECOND
	:NLOPT_LD_TNEWTON_PRECOND_RESTART
	:NLOPT_GN_CRS2_LM
	:NLOPT_GN_MLSL
	:NLOPT_GD_MLSL
	:NLOPT_GN_MLSL_LDS
	:NLOPT_GD_MLSL_LDS
	:NLOPT_LD_MMA
	:NLOPT_LN_COBYLA
	:NLOPT_LN_NEWUOA
	:NLOPT_LN_NEWUOA_BOUND
	:NLOPT_LN_NELDERMEAD
	:NLOPT_LN_SBPLX
	:NLOPT_LN_AUGLAG
	:NLOPT_LD_AUGLAG
	:NLOPT_LN_AUGLAG_EQ
	:NLOPT_LD_AUGLAG_EQ
	:NLOPT_LN_BOBYQA
	:NLOPT_GN_ISRES
	:NLOPT_AUGLAG
	:NLOPT_AUGLAG_EQ
	:NLOPT_G_MLSL
	:NLOPT_G_MLSL_LDS
	:NLOPT_LD_SLSQP
	:NLOPT_LD_CCSAQ
	:NLOPT_GN_ESCH
	:NLOPT_NUM_ALGORITHMS)

(cffi:defcfun ("nlopt_algorithm_name" nlopt_algorithm_name) :string
  (a nlopt_algorithm))

(cffi:defcenum nlopt_result
	(:NLOPT_FAILURE #.-1)
	(:NLOPT_INVALID_ARGS #.-2)
	(:NLOPT_OUT_OF_MEMORY #.-3)
	(:NLOPT_ROUNDOFF_LIMITED #.-4)
	(:NLOPT_FORCED_STOP #.-5)
	(:NLOPT_SUCCESS #.1)
	(:NLOPT_STOPVAL_REACHED #.2)
	(:NLOPT_FTOL_REACHED #.3)
	(:NLOPT_XTOL_REACHED #.4)
	(:NLOPT_MAXEVAL_REACHED #.5)
	(:NLOPT_MAXTIME_REACHED #.6))

(cffi:defcfun ("nlopt_srand" nlopt_srand) :void
  (seed :unsigned-long))

(cffi:defcfun ("nlopt_srand_time" nlopt_srand_time) :void)

(cffi:defcfun ("nlopt_version" nlopt_version) :void
  (major :pointer)
  (minor :pointer)
  (bugfix :pointer))

(cffi:defcfun ("nlopt_create" nlopt_create) :pointer
  (algorithm nlopt_algorithm)
  (n :unsigned-int))

(cffi:defcfun ("nlopt_destroy" nlopt_destroy) :void
  (opt :pointer))

(cffi:defcfun ("nlopt_copy" nlopt_copy) :pointer
  (opt :pointer))

(cffi:defcfun ("nlopt_optimize" nlopt_optimize) nlopt_result
  (opt :pointer)
  (x :pointer)
  (opt_f :pointer))

(cffi:defcfun ("nlopt_set_min_objective" nlopt_set_min_objective) nlopt_result
  (opt :pointer)
  (f :pointer)
  (f_data :pointer))

(cffi:defcfun ("nlopt_set_max_objective" nlopt_set_max_objective) nlopt_result
  (opt :pointer)
  (f :pointer)
  (f_data :pointer))

(cffi:defcfun ("nlopt_set_precond_min_objective" nlopt_set_precond_min_objective) nlopt_result
  (opt :pointer)
  (f :pointer)
  (pre :pointer)
  (f_data :pointer))

(cffi:defcfun ("nlopt_set_precond_max_objective" nlopt_set_precond_max_objective) nlopt_result
  (opt :pointer)
  (f :pointer)
  (pre :pointer)
  (f_data :pointer))

(cffi:defcfun ("nlopt_get_algorithm" nlopt_get_algorithm) nlopt_algorithm
  (opt :pointer))

(cffi:defcfun ("nlopt_get_dimension" nlopt_get_dimension) :unsigned-int
  (opt :pointer))

(cffi:defcfun ("nlopt_set_lower_bounds" nlopt_set_lower_bounds) nlopt_result
  (opt :pointer)
  (lb :pointer))

(cffi:defcfun ("nlopt_set_lower_bounds1" nlopt_set_lower_bounds1) nlopt_result
  (opt :pointer)
  (lb :double))

(cffi:defcfun ("nlopt_get_lower_bounds" nlopt_get_lower_bounds) nlopt_result
  (opt :pointer)
  (lb :pointer))

(cffi:defcfun ("nlopt_set_upper_bounds" nlopt_set_upper_bounds) nlopt_result
  (opt :pointer)
  (ub :pointer))

(cffi:defcfun ("nlopt_set_upper_bounds1" nlopt_set_upper_bounds1) nlopt_result
  (opt :pointer)
  (ub :double))

(cffi:defcfun ("nlopt_get_upper_bounds" nlopt_get_upper_bounds) nlopt_result
  (opt :pointer)
  (ub :pointer))

(cffi:defcfun ("nlopt_remove_inequality_constraints" nlopt_remove_inequality_constraints) nlopt_result
  (opt :pointer))

(cffi:defcfun ("nlopt_add_inequality_constraint" nlopt_add_inequality_constraint) nlopt_result
  (opt :pointer)
  (fc :pointer)
  (fc_data :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_add_precond_inequality_constraint" nlopt_add_precond_inequality_constraint) nlopt_result
  (opt :pointer)
  (fc :pointer)
  (pre :pointer)
  (fc_data :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_add_inequality_mconstraint" nlopt_add_inequality_mconstraint) nlopt_result
  (opt :pointer)
  (m :unsigned-int)
  (fc :pointer)
  (fc_data :pointer)
  (tol :pointer))

(cffi:defcfun ("nlopt_remove_equality_constraints" nlopt_remove_equality_constraints) nlopt_result
  (opt :pointer))

(cffi:defcfun ("nlopt_add_equality_constraint" nlopt_add_equality_constraint) nlopt_result
  (opt :pointer)
  (h :pointer)
  (h_data :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_add_precond_equality_constraint" nlopt_add_precond_equality_constraint) nlopt_result
  (opt :pointer)
  (h :pointer)
  (pre :pointer)
  (h_data :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_add_equality_mconstraint" nlopt_add_equality_mconstraint) nlopt_result
  (opt :pointer)
  (m :unsigned-int)
  (h :pointer)
  (h_data :pointer)
  (tol :pointer))

(cffi:defcfun ("nlopt_set_stopval" nlopt_set_stopval) nlopt_result
  (opt :pointer)
  (stopval :double))

(cffi:defcfun ("nlopt_get_stopval" nlopt_get_stopval) :double
  (opt :pointer))

(cffi:defcfun ("nlopt_set_ftol_rel" nlopt_set_ftol_rel) nlopt_result
  (opt :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_get_ftol_rel" nlopt_get_ftol_rel) :double
  (opt :pointer))

(cffi:defcfun ("nlopt_set_ftol_abs" nlopt_set_ftol_abs) nlopt_result
  (opt :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_get_ftol_abs" nlopt_get_ftol_abs) :double
  (opt :pointer))

(cffi:defcfun ("nlopt_set_xtol_rel" nlopt_set_xtol_rel) nlopt_result
  (opt :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_get_xtol_rel" nlopt_get_xtol_rel) :double
  (opt :pointer))

(cffi:defcfun ("nlopt_set_xtol_abs1" nlopt_set_xtol_abs1) nlopt_result
  (opt :pointer)
  (tol :double))

(cffi:defcfun ("nlopt_set_xtol_abs" nlopt_set_xtol_abs) nlopt_result
  (opt :pointer)
  (tol :pointer))

(cffi:defcfun ("nlopt_get_xtol_abs" nlopt_get_xtol_abs) nlopt_result
  (opt :pointer)
  (tol :pointer))

(cffi:defcfun ("nlopt_set_maxeval" nlopt_set_maxeval) nlopt_result
  (opt :pointer)
  (maxeval :int))

(cffi:defcfun ("nlopt_get_maxeval" nlopt_get_maxeval) :int
  (opt :pointer))

(cffi:defcfun ("nlopt_set_maxtime" nlopt_set_maxtime) nlopt_result
  (opt :pointer)
  (maxtime :double))

(cffi:defcfun ("nlopt_get_maxtime" nlopt_get_maxtime) :double
  (opt :pointer))

(cffi:defcfun ("nlopt_force_stop" nlopt_force_stop) nlopt_result
  (opt :pointer))

(cffi:defcfun ("nlopt_set_force_stop" nlopt_set_force_stop) nlopt_result
  (opt :pointer)
  (val :int))

(cffi:defcfun ("nlopt_get_force_stop" nlopt_get_force_stop) :int
  (opt :pointer))

(cffi:defcfun ("nlopt_set_local_optimizer" nlopt_set_local_optimizer) nlopt_result
  (opt :pointer)
  (local_opt :pointer))

(cffi:defcfun ("nlopt_set_population" nlopt_set_population) nlopt_result
  (opt :pointer)
  (pop :unsigned-int))

(cffi:defcfun ("nlopt_get_population" nlopt_get_population) :unsigned-int
  (opt :pointer))

(cffi:defcfun ("nlopt_set_vector_storage" nlopt_set_vector_storage) nlopt_result
  (opt :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("nlopt_get_vector_storage" nlopt_get_vector_storage) :unsigned-int
  (opt :pointer))

(cffi:defcfun ("nlopt_set_default_initial_step" nlopt_set_default_initial_step) nlopt_result
  (opt :pointer)
  (x :pointer))

(cffi:defcfun ("nlopt_set_initial_step" nlopt_set_initial_step) nlopt_result
  (opt :pointer)
  (dx :pointer))

(cffi:defcfun ("nlopt_set_initial_step1" nlopt_set_initial_step1) nlopt_result
  (opt :pointer)
  (dx :double))

(cffi:defcfun ("nlopt_get_initial_step" nlopt_get_initial_step) nlopt_result
  (opt :pointer)
  (x :pointer)
  (dx :pointer))

(cffi:defcfun ("nlopt_set_munge" nlopt_set_munge) :void
  (opt :pointer)
  (munge_on_destroy :pointer)
  (munge_on_copy :pointer))

(cffi:defcfun ("nlopt_munge_data" nlopt_munge_data) :void
  (opt :pointer)
  (munge :pointer)
  (data :pointer))

(cffi:defcfun ("nlopt_minimize" nlopt_minimize) nlopt_result
  (algorithm nlopt_algorithm)
  (n :int)
  (f :pointer)
  (f_data :pointer)
  (lb :pointer)
  (ub :pointer)
  (x :pointer)
  (minf :pointer)
  (minf_max :double)
  (ftol_rel :double)
  (ftol_abs :double)
  (xtol_rel :double)
  (xtol_abs :pointer)
  (maxeval :int)
  (maxtime :double))

(cffi:defcfun ("nlopt_minimize_constrained" nlopt_minimize_constrained) nlopt_result
  (algorithm nlopt_algorithm)
  (n :int)
  (f :pointer)
  (f_data :pointer)
  (m :int)
  (fc :pointer)
  (fc_data :pointer)
  (fc_datum_size :pointer)
  (lb :pointer)
  (ub :pointer)
  (x :pointer)
  (minf :pointer)
  (minf_max :double)
  (ftol_rel :double)
  (ftol_abs :double)
  (xtol_rel :double)
  (xtol_abs :pointer)
  (maxeval :int)
  (maxtime :double))

(cffi:defcfun ("nlopt_minimize_econstrained" nlopt_minimize_econstrained) nlopt_result
  (algorithm nlopt_algorithm)
  (n :int)
  (f :pointer)
  (f_data :pointer)
  (m :int)
  (fc :pointer)
  (fc_data :pointer)
  (fc_datum_size :pointer)
  (p :int)
  (h :pointer)
  (h_data :pointer)
  (h_datum_size :pointer)
  (lb :pointer)
  (ub :pointer)
  (x :pointer)
  (minf :pointer)
  (minf_max :double)
  (ftol_rel :double)
  (ftol_abs :double)
  (xtol_rel :double)
  (xtol_abs :pointer)
  (htol_rel :double)
  (htol_abs :double)
  (maxeval :int)
  (maxtime :double))

(cffi:defcfun ("nlopt_get_local_search_algorithm" nlopt_get_local_search_algorithm) :void
  (deriv :pointer)
  (nonderiv :pointer)
  (maxeval :pointer))

(cffi:defcfun ("nlopt_set_local_search_algorithm" nlopt_set_local_search_algorithm) :void
  (deriv nlopt_algorithm)
  (nonderiv nlopt_algorithm)
  (maxeval :int))

(cffi:defcfun ("nlopt_get_stochastic_population" nlopt_get_stochastic_population) :int)

(cffi:defcfun ("nlopt_set_stochastic_population" nlopt_set_stochastic_population) :void
  (pop :int))


